{
    "docs": [
        {
            "location": "/",
            "text": "UncertainData.jl\n\n\n\n\nMotivation\n\n\nUncertainData.jl was born to systematically deal with uncertain data, and to sample uncertain dataset more rigorously. It makes workflows involving uncertain data significantly easier.\n\n\n\n\nProbabilistic representation of uncertain observations\n\n\nWay too often in data analysis the uncertainties in observational data are ignored or not dealt with in a systematic manner. The core concept of the package is that uncertain data should live in the probability domain, not as single value representations of the data (e.g. the mean).\n\n\n\n\nUncertain values and datasets of uncertain values\n\n\nIn this package, data values are stored as probability distributions. Likewise, indices (e.g. time, depth or any other index) of observations are also represented as probability distributions.\n\n\nIndividual uncertain observations may be collected in \nUncertainDatasets\n, which can be sampled according to user-provided sampling constraints.\n\n\n\n\nBasic workflow\n\n\n\n\nCreating uncertain values\n\n\nUncertain values are created by using the \nUncertainValue\n constructor.\n\n\nThere are two ways to construct uncertain values:\n\n\n\n\nFitting a distribution to empirical data\n\n\nSpecifying a probability distribution with parameters.\n\n\n\n\n\n\nCreating uncertain datasets\n\n\nBlabla.\n\n\n\n\nResampling",
            "title": "Home"
        },
        {
            "location": "/#uncertaindatajl",
            "text": "",
            "title": "UncertainData.jl"
        },
        {
            "location": "/#motivation",
            "text": "UncertainData.jl was born to systematically deal with uncertain data, and to sample uncertain dataset more rigorously. It makes workflows involving uncertain data significantly easier.",
            "title": "Motivation"
        },
        {
            "location": "/#probabilistic-representation-of-uncertain-observations",
            "text": "Way too often in data analysis the uncertainties in observational data are ignored or not dealt with in a systematic manner. The core concept of the package is that uncertain data should live in the probability domain, not as single value representations of the data (e.g. the mean).",
            "title": "Probabilistic representation of uncertain observations"
        },
        {
            "location": "/#uncertain-values-and-datasets-of-uncertain-values",
            "text": "In this package, data values are stored as probability distributions. Likewise, indices (e.g. time, depth or any other index) of observations are also represented as probability distributions.  Individual uncertain observations may be collected in  UncertainDatasets , which can be sampled according to user-provided sampling constraints.",
            "title": "Uncertain values and datasets of uncertain values"
        },
        {
            "location": "/#basic-workflow",
            "text": "",
            "title": "Basic workflow"
        },
        {
            "location": "/#creating-uncertain-values",
            "text": "Uncertain values are created by using the  UncertainValue  constructor.  There are two ways to construct uncertain values:   Fitting a distribution to empirical data  Specifying a probability distribution with parameters.",
            "title": "Creating uncertain values"
        },
        {
            "location": "/#creating-uncertain-datasets",
            "text": "Blabla.",
            "title": "Creating uncertain datasets"
        },
        {
            "location": "/#resampling",
            "text": "",
            "title": "Resampling"
        },
        {
            "location": "/uncertain_values/",
            "text": "From distributions with known parameters\n\n\nTo construct uncertain values represented by probability distributions with known parameters, the following constructors are used. The order the parameters are provided to the constructor is the same as for constructing the equivalent distributions in \nDistributions.jl\n.\n\n\n\n\nUncertainValue(d::Type{D}, a<:Number, b<:Number) where {D<:Distributions.Distribution}\n. Creates an uncertain value consisting of a two-parameter distribution of type \nd\n with parameters \na\n and \nb\n. Precisely what \na\n and \nb\n are depends on which distribution is provided.\n\n\nUncertainValue(d::Type{D}, a<:Number, b<:Number, c<:Number) where {D<:Distributions.Distribution}\n. Creates an uncertain value consisting of a three-parameter distribution of type \nd\n with parameters \na\n and \nb\n. Precisely what \na\n, \nb\n and \nc\n are depends on which distribution is provided.\n\n\n\n\nSupported distributions\n:\n\n\n\n\nUncertainValue(Uniform, -5.0, 5.1)\n.  Creates an uncertain value generated by uniform distribution on \n[-5.0, 5.1]\n.\n\n\nUncertainValue(Normal, -2, 0.5)\n.  Creates an uncertain value generated by normal distribution with parameters \n\u03bc = -2\n and \n\u03c3 = 0.5\n.\n\n\nUncertainValue(Gamma, 2.2, 3)\n.  Creates an uncertain value generated by gamma distribution with parameters \n\u03b1  = 2.2\n and \n\u03b8 = 3\n.\n\n\nUncertainValue(Beta, 1.5, 3.5)\n.  Creates an uncertain value generated by beta distribution with parameters \n\u03b1  = 1.5\n and \n\u03b2 = 3.5\n.\n\n\nUncertainValue(BetaPrime, 1.5, 3.5)\n.  Creates an uncertain value generated by beta distribution with parameters \n\u03b1  = 1.5\n and \n\u03b2 = 3.5\n.\n\n\nUncertainValue(Frechet, 2.2, 3)\n.  Creates an uncertain value generated by Fr\u00e9chet distribution with parameters \n\u03b1  = 2.2\n and \n\u03b8 = 3\n.\n\n\nUncertainValue(Binomial, 28, 0.2)\n.  Creates an uncertain value generated by binomial distribution with \nn = 28\n trials and probability \np = 0.2\n of success in individual trials.\n\n\nUncertainValue(BetaBinomial, 28, 3.3, 4.4)\n.  Creates an uncertain value generated by a beta-binomial distribution with \nn = 28\n trials, and parameters \n\u03b1  = 1.5\n and \n\u03b2 = 3.5\n.\n\n\n\n\n\n\nFrom empirical distributions\n\n\nTo construct uncertain values represented by empirical distributions, use the following constructor.\n\n\n\n\nUncertainValue(d::Type{D}, empiricaldata) where {D<:Distributions.Distribution}\n. This will fit a distribution of type \nd\n to the data and keep that as the representation of the empirical distribution. Calls \nDistributions.fit\n behind the scenes.\n\n\n\n\nThis is the constructor you would use when you have empirical data that has a histogram close to one of the supported theoretical distributions. \nBe sure to actually look at you data before deciding on an appropriate distribution to fit, though! You won't get any error messages if you try to fit a distribution that does not match your data!\n\n\nSupported distributions\n:\n\n\n\n\nUncertainValue(Uniform, empiricaldata)\n.  Creates an uncertain value generated by a uniform distribution fitted to \nempiricaldata\n.\n\n\nUncertainValue(Normal, empiricaldata)\n. Creates an uncertain value generated by a normal distribution fitted to \nempiricaldata\n.\n\n\nUncertainValue(Gamma, empiricaldata)\n. Creates an uncertain value generated by a gamma distribution fitted to \nempiricaldata\n.\n\n\nUncertainValue(Beta, empiricaldata)\n. Creates an uncertain value generated by a beta distribution fitted to \nempiricaldata\n.\n\n\nUncertainValue(BetaPrime, empiricaldata)\n. Creates an uncertain value generated by a beta prime distribution fitted to \nempiricaldata\n.\n\n\nUncertainValue(Frechet, empiricaldata)\n.  Creates an uncertain value generated by a Fr\u00e9chet distribution fitted to \nempiricaldata\n.\n\n\nUncertainValue(Binomial, empiricaldata)\n.  Creates an uncertain value generated by a binomial distribution fitted to \nempiricaldata\n.\n\n\nUncertainValue(BetaBinomial, empiricaldata)\n.  Creates an uncertain value generated by a beta-binomial distribution fitted to \nempiricaldata\n.\n\n\n\n\nExamples\n:\n\n\n\n\nUncertainValue(Uniform, rand(Uniform(-2, 3), 1000))\n.  Fits a uniform distribution to 1000 values generated uniformly on the interval \n[-2, 3]\n.\n\n\nUncertainValue(Normal, rand(Normal(), 1000))\n.  Fits a uniform distribution to 1000 values generated from a normal distribution.",
            "title": "Uncertain values"
        },
        {
            "location": "/uncertain_values/#from-distributions-with-known-parameters",
            "text": "To construct uncertain values represented by probability distributions with known parameters, the following constructors are used. The order the parameters are provided to the constructor is the same as for constructing the equivalent distributions in  Distributions.jl .   UncertainValue(d::Type{D}, a<:Number, b<:Number) where {D<:Distributions.Distribution} . Creates an uncertain value consisting of a two-parameter distribution of type  d  with parameters  a  and  b . Precisely what  a  and  b  are depends on which distribution is provided.  UncertainValue(d::Type{D}, a<:Number, b<:Number, c<:Number) where {D<:Distributions.Distribution} . Creates an uncertain value consisting of a three-parameter distribution of type  d  with parameters  a  and  b . Precisely what  a ,  b  and  c  are depends on which distribution is provided.   Supported distributions :   UncertainValue(Uniform, -5.0, 5.1) .  Creates an uncertain value generated by uniform distribution on  [-5.0, 5.1] .  UncertainValue(Normal, -2, 0.5) .  Creates an uncertain value generated by normal distribution with parameters  \u03bc = -2  and  \u03c3 = 0.5 .  UncertainValue(Gamma, 2.2, 3) .  Creates an uncertain value generated by gamma distribution with parameters  \u03b1  = 2.2  and  \u03b8 = 3 .  UncertainValue(Beta, 1.5, 3.5) .  Creates an uncertain value generated by beta distribution with parameters  \u03b1  = 1.5  and  \u03b2 = 3.5 .  UncertainValue(BetaPrime, 1.5, 3.5) .  Creates an uncertain value generated by beta distribution with parameters  \u03b1  = 1.5  and  \u03b2 = 3.5 .  UncertainValue(Frechet, 2.2, 3) .  Creates an uncertain value generated by Fr\u00e9chet distribution with parameters  \u03b1  = 2.2  and  \u03b8 = 3 .  UncertainValue(Binomial, 28, 0.2) .  Creates an uncertain value generated by binomial distribution with  n = 28  trials and probability  p = 0.2  of success in individual trials.  UncertainValue(BetaBinomial, 28, 3.3, 4.4) .  Creates an uncertain value generated by a beta-binomial distribution with  n = 28  trials, and parameters  \u03b1  = 1.5  and  \u03b2 = 3.5 .",
            "title": "From distributions with known parameters"
        },
        {
            "location": "/uncertain_values/#from-empirical-distributions",
            "text": "To construct uncertain values represented by empirical distributions, use the following constructor.   UncertainValue(d::Type{D}, empiricaldata) where {D<:Distributions.Distribution} . This will fit a distribution of type  d  to the data and keep that as the representation of the empirical distribution. Calls  Distributions.fit  behind the scenes.   This is the constructor you would use when you have empirical data that has a histogram close to one of the supported theoretical distributions.  Be sure to actually look at you data before deciding on an appropriate distribution to fit, though! You won't get any error messages if you try to fit a distribution that does not match your data!  Supported distributions :   UncertainValue(Uniform, empiricaldata) .  Creates an uncertain value generated by a uniform distribution fitted to  empiricaldata .  UncertainValue(Normal, empiricaldata) . Creates an uncertain value generated by a normal distribution fitted to  empiricaldata .  UncertainValue(Gamma, empiricaldata) . Creates an uncertain value generated by a gamma distribution fitted to  empiricaldata .  UncertainValue(Beta, empiricaldata) . Creates an uncertain value generated by a beta distribution fitted to  empiricaldata .  UncertainValue(BetaPrime, empiricaldata) . Creates an uncertain value generated by a beta prime distribution fitted to  empiricaldata .  UncertainValue(Frechet, empiricaldata) .  Creates an uncertain value generated by a Fr\u00e9chet distribution fitted to  empiricaldata .  UncertainValue(Binomial, empiricaldata) .  Creates an uncertain value generated by a binomial distribution fitted to  empiricaldata .  UncertainValue(BetaBinomial, empiricaldata) .  Creates an uncertain value generated by a beta-binomial distribution fitted to  empiricaldata .   Examples :   UncertainValue(Uniform, rand(Uniform(-2, 3), 1000)) .  Fits a uniform distribution to 1000 values generated uniformly on the interval  [-2, 3] .  UncertainValue(Normal, rand(Normal(), 1000)) .  Fits a uniform distribution to 1000 values generated from a normal distribution.",
            "title": "From empirical distributions"
        },
        {
            "location": "/resampling/",
            "text": "Resampling with constraints\n\n\n\n\nResampling syntax\n\n\nThe following syntax is used to resample uncertain values.\n\n\n\n\nresample(uv::AbstractUncertainValue, constraint::SamplingConstraint)\n. Resample the uncertain value once within the restrictions imposed by the sampling constraint.\n\n\nresample(uv::AbstractUncertainValue, constraint::SamplingConstraint, n::Int)\n. Resample the uncertain value \nn\n times within the restrictions imposed by the sampling constraint.\n\n\n\n\n\n\nAvailable sampling constraints\n\n\nThe following sampling constraints are available:\n\n\n\n\nTruncateStd(n\u03c3::Int)\n. Truncate the distribution furnishing the uncertain data point(s) at \nn\n times the standard deviation of the distribution.\n\n\nTruncateMinimum(min<:Number)\n. Truncate the distribution furnishing the uncertain data point(s) at some minimum value.\n\n\nTruncateMaximum(max<:Number)\n. Truncate the distribution furnishing the uncertain data point(s) at some maximum value.\n\n\nTruncateRange(min<:Number, max<:Number)\n. Truncate the distribution furnishing the uncertain data point(s) at some range.\n\n\nTruncateLowerQuantile(lower_quantile::Float64)\n. Truncate the distribution furnishing the uncertain data point(s) at some lower quantile of the distribution.\n\n\nTruncateUpperQuantile(upper_quantile::Float64)\n. Truncate the distribution furnishing the uncertain data point(s) at some upper quantile of the distribution.\n\n\nTruncateQuantiles(lower_quantile::Float64, upper_quantile::Float64)\n. Truncate the distribution furnishing the uncertain data point(s) at a \nlower_quantile\n and an \nupper_quantile\n of the distribution.\n\n\n\n\n\n\nExamples\n\n\nLet \nuv = UncertainValue(Normal, 1, 0.2)\n. One may, for example, impose the following sampling constraints:\n\n\n\n\nresample(uv, TruncateLowerQuantile(0.2))\n. Resamples \nuv\n 100 times, drawing values strictly larger than the \n0.2\n-th quantile of the distribution furnishing the uncertain data point.\n\n\nresample(uv, TruncateStd(1), 100)\n. Resamples \nuv\n 100 times, drawing values falling within one standard deviation of the distribution furnishing the uncertain value.\n\n\nresample(uv, TruncateRange(-0.5, 1), 100)\n. Resamples \nuv\n 100 times, drawing values from the distribution furnishing the uncertain value within the interval \n[-0.5, 1]\n.",
            "title": "Resampling"
        },
        {
            "location": "/resampling/#resampling-with-constraints",
            "text": "",
            "title": "Resampling with constraints"
        },
        {
            "location": "/resampling/#resampling-syntax",
            "text": "The following syntax is used to resample uncertain values.   resample(uv::AbstractUncertainValue, constraint::SamplingConstraint) . Resample the uncertain value once within the restrictions imposed by the sampling constraint.  resample(uv::AbstractUncertainValue, constraint::SamplingConstraint, n::Int) . Resample the uncertain value  n  times within the restrictions imposed by the sampling constraint.",
            "title": "Resampling syntax"
        },
        {
            "location": "/resampling/#available-sampling-constraints",
            "text": "The following sampling constraints are available:   TruncateStd(n\u03c3::Int) . Truncate the distribution furnishing the uncertain data point(s) at  n  times the standard deviation of the distribution.  TruncateMinimum(min<:Number) . Truncate the distribution furnishing the uncertain data point(s) at some minimum value.  TruncateMaximum(max<:Number) . Truncate the distribution furnishing the uncertain data point(s) at some maximum value.  TruncateRange(min<:Number, max<:Number) . Truncate the distribution furnishing the uncertain data point(s) at some range.  TruncateLowerQuantile(lower_quantile::Float64) . Truncate the distribution furnishing the uncertain data point(s) at some lower quantile of the distribution.  TruncateUpperQuantile(upper_quantile::Float64) . Truncate the distribution furnishing the uncertain data point(s) at some upper quantile of the distribution.  TruncateQuantiles(lower_quantile::Float64, upper_quantile::Float64) . Truncate the distribution furnishing the uncertain data point(s) at a  lower_quantile  and an  upper_quantile  of the distribution.",
            "title": "Available sampling constraints"
        },
        {
            "location": "/resampling/#examples",
            "text": "Let  uv = UncertainValue(Normal, 1, 0.2) . One may, for example, impose the following sampling constraints:   resample(uv, TruncateLowerQuantile(0.2)) . Resamples  uv  100 times, drawing values strictly larger than the  0.2 -th quantile of the distribution furnishing the uncertain data point.  resample(uv, TruncateStd(1), 100) . Resamples  uv  100 times, drawing values falling within one standard deviation of the distribution furnishing the uncertain value.  resample(uv, TruncateRange(-0.5, 1), 100) . Resamples  uv  100 times, drawing values from the distribution furnishing the uncertain value within the interval  [-0.5, 1] .",
            "title": "Examples"
        },
        {
            "location": "/ensemble_statistics/",
            "text": "Examples of uncertainty ensemble statistics\n\n\nThis package implements most of the statistical algorithms in \nStatsBase\n for uncertain values and uncertain datasets.\n\n\nThe syntax for calling the algorithms is the same as in \nStatsBase\n, but the functions here accept an additional positional argument \nn\n, which controls how many times the uncertain values are resampled to compute the statistics. The default number of times to resample is \nn = 1000\n.\n\n\n\n\nStatistics of single uncertain values\n\n\n\n\nmean(d::AbstractUncertainValue, n::Int = 1000)\n. Computes the mean of an uncertain value.\n\n\nmedian(d::AbstractUncertainValue, n::Int = 1000)\n. Computes the median of an uncertain value.\n\n\nmiddle(d::AbstractUncertainValue, n::Int = 1000)\n. Computes the middle of an uncertain value.\n\n\nstd(d::AbstractUncertainValue, n::Int = 1000)\n. Computes the standard deviation of an uncertain value.\n\n\nvar(d::AbstractUncertainValue, n::Int = 1000)\n. Computes the variance of an uncertain value.\n\n\nquantile(d::AbstractUncertainValue, p, n::Int = 1000)\n. Computes the \np\n-th quantile(s) of an uncertain value.\n\n\n\n\n\n\nStatistics on datasets of uncertain values\n\n\nThe following statistics are available for uncertain datasets (collections of uncertain values). \n\n\n\n\nmean(d::UncertainDataset\n). Computes the element-wise mean of a dataset of uncertain values.\n\n\nmedian(d::UncertainDataset\n). Computes the element-wise median of a dataset of uncertain values.\n\n\nmiddle(d::UncertainDataset\n). Computes the element-wise middle of a dataset of uncertain values.\n\n\nstd(d::UncertainDataset\n). Computes the element-wise standard deviation of a dataset of uncertain values.\n\n\nvar(d::UncertainDataset\n). Computes the element-wise variance of a dataset of uncertain values.\n\n\nquantile(d::UncertainDataset, p, n::Int = 1000)\n. Computes the element-wise \np\n-th quantile(s) of a dataset of uncertain values.\n\n\ncor(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000)\n. Compute the correlation between two datasets consisting of uncertain values.\n\n\ncov(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000)\n. Compute the correlation between two datasets consisting of uncertain values.",
            "title": "Ensemble statistics"
        },
        {
            "location": "/ensemble_statistics/#examples-of-uncertainty-ensemble-statistics",
            "text": "This package implements most of the statistical algorithms in  StatsBase  for uncertain values and uncertain datasets.  The syntax for calling the algorithms is the same as in  StatsBase , but the functions here accept an additional positional argument  n , which controls how many times the uncertain values are resampled to compute the statistics. The default number of times to resample is  n = 1000 .",
            "title": "Examples of uncertainty ensemble statistics"
        },
        {
            "location": "/ensemble_statistics/#statistics-of-single-uncertain-values",
            "text": "mean(d::AbstractUncertainValue, n::Int = 1000) . Computes the mean of an uncertain value.  median(d::AbstractUncertainValue, n::Int = 1000) . Computes the median of an uncertain value.  middle(d::AbstractUncertainValue, n::Int = 1000) . Computes the middle of an uncertain value.  std(d::AbstractUncertainValue, n::Int = 1000) . Computes the standard deviation of an uncertain value.  var(d::AbstractUncertainValue, n::Int = 1000) . Computes the variance of an uncertain value.  quantile(d::AbstractUncertainValue, p, n::Int = 1000) . Computes the  p -th quantile(s) of an uncertain value.",
            "title": "Statistics of single uncertain values"
        },
        {
            "location": "/ensemble_statistics/#statistics-on-datasets-of-uncertain-values",
            "text": "The following statistics are available for uncertain datasets (collections of uncertain values).    mean(d::UncertainDataset ). Computes the element-wise mean of a dataset of uncertain values.  median(d::UncertainDataset ). Computes the element-wise median of a dataset of uncertain values.  middle(d::UncertainDataset ). Computes the element-wise middle of a dataset of uncertain values.  std(d::UncertainDataset ). Computes the element-wise standard deviation of a dataset of uncertain values.  var(d::UncertainDataset ). Computes the element-wise variance of a dataset of uncertain values.  quantile(d::UncertainDataset, p, n::Int = 1000) . Computes the element-wise  p -th quantile(s) of a dataset of uncertain values.  cor(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000) . Compute the correlation between two datasets consisting of uncertain values.  cov(d1::UncertainDataset, d2::UncertainDataset, n::Int = 1000) . Compute the correlation between two datasets consisting of uncertain values.",
            "title": "Statistics on datasets of uncertain values"
        },
        {
            "location": "/implementing_algorithms_for_uncertaindata/",
            "text": "Implementing algorithms for uncertain data\n\n\nDo you already have an algorithm computing some statistic that you want to obtain uncertainty estimates for? Simply use Julia's multiple dispatch and create a version of the algorithm function that accepts the \nAbstractUncertainValue\n and \nAbstractUncertainDataset\n types, along with a \nSamplingConstraints\n specifying how the uncertain values are should be resampled.\n\n\nA basic function skeleton could be\n\n\n# Some algorithm computing a statistic for a scalar-valued vector\nfunction myalgorithm(dataset::Vector{T}; kwargs...) where T\n    # some algorithm returning a single-valued statistic\nend\n\n# Applying the algorithm to an ensemble of realisations from\n# an uncertain dataset, given a sampling constraint.\nfunction myalgorithm(d::UncertainDataset, constraint::C;\n        n_ensemble_realisations = 100, kwargs...)\n        where {C <: SamplingConstraint}\n\n    ensemble_stats = zeros(n_ensemble_realisations)\n\n    for i in 1:n_ensemble_realisations\n        ensemble_stats[i] = myalgorithm(resample(d, constraint); kwargs...)\n    end\n\n    return ensemble_stats\nend",
            "title": "Extending existing algorithms for uncertain data types"
        },
        {
            "location": "/implementing_algorithms_for_uncertaindata/#implementing-algorithms-for-uncertain-data",
            "text": "Do you already have an algorithm computing some statistic that you want to obtain uncertainty estimates for? Simply use Julia's multiple dispatch and create a version of the algorithm function that accepts the  AbstractUncertainValue  and  AbstractUncertainDataset  types, along with a  SamplingConstraints  specifying how the uncertain values are should be resampled.  A basic function skeleton could be  # Some algorithm computing a statistic for a scalar-valued vector\nfunction myalgorithm(dataset::Vector{T}; kwargs...) where T\n    # some algorithm returning a single-valued statistic\nend\n\n# Applying the algorithm to an ensemble of realisations from\n# an uncertain dataset, given a sampling constraint.\nfunction myalgorithm(d::UncertainDataset, constraint::C;\n        n_ensemble_realisations = 100, kwargs...)\n        where {C <: SamplingConstraint}\n\n    ensemble_stats = zeros(n_ensemble_realisations)\n\n    for i in 1:n_ensemble_realisations\n        ensemble_stats[i] = myalgorithm(resample(d, constraint); kwargs...)\n    end\n\n    return ensemble_stats\nend",
            "title": "Implementing algorithms for uncertain data"
        }
    ]
}